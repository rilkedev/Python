Building a Linked List in Python from Scratch:

**The Node Class**

1) We create a Node class below. Upon creating an instance of the Node class, we'd like for the user to pass data such that it can be stored in the node. 
    > Note that the __init__ function has to contain "self", and the placeholder for a recieved value called "data" is type-inferenced which is expected. 
    > self.data = data ensures that the data passed is attached to the object. Note that "data" was not created before the __init__ method, it was simply 
      introduced as an argument and attached to the object by self.data = data. This is because python infers the creation of these attributes once we express a 
      statement where their usage is apparent. For instance, "next" was not introduced before the __init__ method; however, the line "self.next = None" 
      within the __init__ function implies that an attribute, next, is needed. Therefore, Python creates this attribute for us implicitly. 
      We could, if we wanted to, create a color attribute by stating: "self.color = color" without actually ever having introduced color before this point. 
    > Note that an attribute need not be passed as an argument for it to be an attribute of the object, either. Attributes passed as an argument are
      attributes that the programmer expects the user to initalize upon creation of the object. All other attributes are attributes that are implementative details.
    > We set, by default, self.next = None. As we know, nodes have a "next" property which allows them to point to the next node that immediately follows it. 
      Upon creation of a singular node, we will set the next property to none, by default, giving our program the oppurtunity to change the node's next value. 

class Node:
  def __init__(self, data):
    self.data = data 
    self.next = None 
    
    > We can ensure that our Node class functions as needed. 
          > Creating a node on the prompt level is as simple as follows:
                N1 = Node("Jerry") //this creates a node called N1 which stores the value of "Jerry"
                print(N1.data) //this prints "Jerry"
           > We can access the next property to see that it is in fact defaulted to "None"
                print(N1.next) //this prints "None"
                
2) We then create a linkedList class. 
  > Upon creation of the class, we ask ourselves an important question - must the user be expected to pass anything as a parameter upon creation? Since it is not
    immediately obvious that we should, we will avoid doing so. Note that it was immediately obvious that "data" should be passed to a node upon creation - which
    is why we passed data as a parameter in the node constructor. 
  > We introduce - again, without prior establishment - the a head reference. This head reference is attribute of the linkedList class. Surely, a linked list 
    of any kind should have an attribute (also called a property) that allows a reference to the head node, its own head. Since this is more of an implemenative 
    detail, we will allow for the head property to be absent from the argument portion of the function definition. 
   > After attaching the head attribute to the linked list by "self.head =", we ponder what, by default, it should be equal to. Such considerations should be made
     inside the __init__ method - here, we are allowed to consider what default values can be, should they exist. Upon creating the linked list, it will
     ideally have a node [* ->] that points to nothing, therefore allowing the program to specify otherwise when applicable. 

class linkedList:
  def __init__(self):
    self.head = None 
  
3) we add an append() function to the LinkedList definition. This function will take a Node as a parameter called new_node, since that is what we want to 
   append to the link list. However, before pondering the algorithmic logic for appending a node to the end of a linked list, we must ask ourselves
   what we should do if the linked list has no elements prior to adding the node we chooe to currently append. You see, if there are no elements 
   (if the head, self.head, is in fact "None", then the head of the list, self.head, should point to the node we've chosen to add. This allows
   us to refer to the head node for purposes of things like traversal. 
   
   def append(self, new_node):
     if self.head == None:
       self.head == new_node 
      else:
        //logic 
        
        
    > An important note forward, and proofs:
      Before moving onto the portion that says //logic, it would be useful to mention a few things by printing certain commands out. 
      At this point, we have a Node classes that allows us to create nodes with concrete values. Each created node has a value attached to it and a 
      next property that points to "None" by default. Follow the below sequence to see how to access Nodes and their data from a linked list 
            We can create a node, N1, with a value of "Jerry" that points to nothing as follows:
             N1 = Node("Jerry")
            We can access the data point by 
            print(N1.data) //prints Jerry 
            We can then create a linked list by 
            ll = LinkedList() 
            We can use the append function to add a node to the linked list 
            ll.append(N1) 
            We enter the append function logic and since self.head == None, we set self.head, the head of the link list, equal to N1. 
            print(ll.head)
            We recieve the following: <__main__.Node object at 0x7fda9e469ee0>
            ll.head is printing out the location to N1, the now head of the linked list. It is not printing out "Jerry" because we have yet to access 
            the data associated with the reference. If we print (ll.head.data), then we are in effect doing N1.data which concludes to "Jerry". 
            
4) We have continued with the above implementation of the append() function because it demonstrates how we can access nodes directly and through the 
   linked list that contains it. However, let us digress from this implementation of the append() function because it is not very efficent. The append() 
   function takes in a node as a parameter; therefore, it is up to the user to pass in a node. This is not particularly useful since the nodes of a linked list
   should be an implemenative detail - it should not, in other words, be visible to the user. Instead, we would like for the user to pass in a value to the 
   linked list by extending the append() function, and that value should internally be stored within a node, the process of which should be "behind the curtains".
   
   Observe the following:
        def append(self, data):
            if self.head == None:
                new_node = Node(data) 
                self.head = new_node
            else:
                #other logic.. 
    In the above implementation, if self.head is not set to anything (because the list was empty), then we create a new node called new_node and we pass create
    an instatiation of the Node object by Node(data) - the full statement is, new_node = Node(Data). So, a node has been created that takes the data passed by 
    the user. In the case of self.head == None, this new node is the first node in the list. After creating the new node which would evidently be the first node 
    (since we have entered the above if-block), let us update what the program should consider to be self.head; therefore, we say self.head = new_node 
    
    Let us try to access the node 
    ll = LinkedList() <- created linked list, default, ll.head is None. print(ll.head) would yield "None"
    ll.append(5) <- passed in data, this data is stored in new_node and since this is the first node created, self.head = new_node, so ll.head = new_node 
    ll.print(ll.head) <- some would expect "5", but that wouldn't be very rational seeing as how ll.head simply refers to the memory location of the node and 
                         not the node itself. This would yeild <__main__.Node object at 0x7f40ea7d5cd0> where 0x7f40ea7d5cd0 is the place in memory for the node. 
    print(ll.head.data) <- refers to the place in memory but also access the data attirbute for the Node class, therefore prints 5. 
    
    Our program so far is the following:
 ------------------ ------
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
#
class LinkedList:
    def __init__(self):
        self.head = None
        
    def append(self, data):
        if self.head == None:
            new_node = Node(data)
            self.head = new_node
        else:
            return
-----------------------------

    Let us now do one more variation and move onto the else clause. Note that whether or not the node created is the first node or a subsequent node, we have to 
    create a node regardless. It is not the case that we should create a node only in some cases. The if/else blocks only repersent what our action should be 
    in the event the newly created node is the first node in the list or a subsequent node. Therefore, it would be better to create the node immediately within
    the append() function and not exclusively do so in a if / else block - we will leave the if/else block to decide where in the sequence of nodes the newly
    created node should sit. The append function will look something like this:
        def append(self, data)
            new_node = Node(data)
            if self.head == None:
                self.head = new_node
             else:
                #further logic.. 

    Tackling "further logic.." - the else clause:
        In the else clause, our approach is to take the already created node and add it to the end of an assumed, existing sequence of nodes. Since linked lists
        are not indexable, we must traverse through the entire list until we reach the end node. Once we have attached a reference to the end node, 
        we can establish the following: end_node.next = new_node , so that the end node's "next" pointer points to the newly created node. However, 
        in order to attain reference to the last node, we have to engage in something called "list traversal" - this algorithim is common:
            current = self.head 
                while current != None:
                    current = current.next 
         we begin by establishing a temporary node called current, and it is merely a reference to self.head (the head node). 
         we open a while loop that states: while this node's reference is not set to "None", keep doing something iteratively. 
         this is current = current.next -> on each iteration of the while-loop, allow current to refer to the next node in line. As soon as we current refers
         to "None", that means that the traversal has concluded. Note that while current != None is the same thing as while current:
     Even though the above is sound, we want to add a minor variation to the condition. Our improvised condition will be:
     keep doing current = current.next until you reach a node who's current.next is None, that will be the last node. Then, after the while-loop concludes, 
     current will be set to the last node. We thereby have a reference onto the last node. After current refers to the last node, we can take current's 
     current.next property and set it equal to the newly created node. Therefore, the newly created node is added to the end of the list. 
     
     current = self.head 
     while current.next != None:
        current = current.next 
     current.next = new_node 
      
 The program has now matured in the following ways: You will notice the creation of a display() function, this iterates in a similar way described above. 
 Remember that append() and display() incurs a linear cost, in that it runs in order of N, O(N)
    

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
           
 class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if self.head == None:
            self.head = new_node
        else:
            current = self.head
            while current.next != None:
                current = current.next
            current.next = new_node

     def display(self):
        current = self.head
        while current:
            print(current.data)
            current = current.next

ll = LinkedList()
ll.append(5)
ll.append(3)
ll.append(2)
ll.display()

prints 
5
3
2


Implementing prepend(): adding an element to the head. 
The function prepend is tasked with assigning a new head to the linked list. In haste, we might say that this would be a matter of assigning self.head = new_node,
however, if the self.head pointer refers to new_node, how will we connect new_node.next = the node that was previously the head? As soon as we assign the
self.head reference to new_node, we lose reference to the node that self.head was attached to. Of course, the motivation is to assign self.head to new_node, 
and then connect new_node.next to the node that was the head. However, since this is not possible under the method we outlined before, we will take another 
approach. We will create a reference called temp, it will equal self.head meaning that temp refers to what self.head refers to. As such, when we set 
self.head equal to new_node, we can attach new_node.next equal temp so that new_node.next refers to what temp is referring to, and since temp is referring to 
the node that was previously the head, new_node.next is connected to the now second node in the linked list. 

   def prepend(self, data):
        new_node = Node(data)
        temp = self.head
        self.head = new_node
        self.head.next = temp
        del temp
        
Finding the length:
 def length(self):
        current = self.head
        count = 0
        while current != None:
            count += 1
            current = current.next
        return "Length is: " + str(count)
        
 
Method to pass in an index and print data at that index:
    > My implementation (note that whatever is specified in range(here) controls how many times the for-loop executes 
    
       def get(self, index):
        #index of n means I want to iterate n+1 times
        current = self.head
        for i in range(index):
           current = current.next
        print(current.data)
        
 

   > def get(self, index):
        if index >= self.length():
            print("Invalid Index")
        else:
            current = self.head
            itr = 0
            while itr != index:
                itr += 1
                current = current.next
            return current.data

        
Method to erase - this is the same as the method to get, however, it stops 1 before the specified index and oversteps the node we need to erase by setting
current.next to current.next.next (set the current node's next pointer to the next next's property)
        
        def erase(self, index):
          current = self.head
            itr = 0
            while itr != index-1:
                itr += 1
                current = current.next
        current.next = current.next.next
        
        
  Matured Code:
  
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        
class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if self.head == None:
            self.head = new_node
        else:
            current = self.head
            while current.next != None:
                current = current.next
            current.next = new_node

    def prepend(self, data):
        new_node = Node(data)
        if self.head == None:
            self.head = new_node
        else:
             new_node.next = self.head
            self.head = new_node


    def length(self):
        current = self.head
        count = 0
        while current != None:
            count += 1
            current = current.next
        return count

    def display(self):
        current = self.head
        while current:
            print(current.data)
            current = current.next

    def get(self, index):
        if index >= self.length():
            print("Invalid Index")
        else:
            current = self.head
            itr = 0
            while itr != index:
                itr += 1
                current = current.next
            return current.data

    def erase(self, index):
        current = self.head
        itr = 0
        while itr != index-1:
            itr += 1
            current = current.next
        current.next = current.next.next

ll = LinkedList()
ll.append("Jerry")
ll.append("Marry")
ll.append("Emma")
ll.append("Anne")
ll.display()
ll.erase(2)
print("--------")
ll.display()
        
        
 While the above implementation may not be robust, the below implementation is:
 https://stackabuse.com/linked-lists-in-detail-with-python-examples-single-linked-lists/
        
        
        
        
Where you left off, implementing insertion by yourself:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
#
class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if self.head == None:
            self.head = new_node
        else:
            current = self.head
            while current.next != None:
                current = current.next
            current.next = new_node

    def prepend(self, data):
        new_node = Node(data)
        if self.head == None:
            self.head = new_node
        else:
            new_node.next = self.head
            self.head = new_node

    def length(self):
        current = self.head
        count = 0
        while current != None:
            count += 1
            current = current.next
        return count

    def display(self):
        current = self.head
        while current:
            print(current.data)
            current = current.next

    def get(self, index):
        if index >= self.length():
            print("Invalid Index")
        else:
            current = self.head
            itr = 0
            while itr != index:
                itr += 1
                current = current.next
            return current.data

    def erase(self, index):
        current = self.head
        itr = 0
        while itr != index-1:
            itr += 1
            current = current.next
        current.next = current.next.next

    def insert(self, index, data):
        new_node = Node(data)
        itr = 0
        current = self.head
        while itr != index - 1:
            current = current.next
            itr += 1
        #we know that this brings us to 1 minus the index of insertion
        temp = current.next
        current.next = new_node
        new_node.next = temp

ll = LinkedList()
ll.append("Jerry")
ll.append("Marry")
ll.append("Matthew")
ll.append("Kerry")
print("----before inserting Sarah at index 2----")
ll.display()
print("------after inserting Sarah at index 2-----")
ll.insert(2, "Sarah")
ll.display()




        
        
        
        
        
        
        
        
        
        
        
        
        
        

    
    
    
    
