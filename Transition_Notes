Transition Notes: 

=========================================================================================================================
#Python works with type inference: age = 5, name = "john", valid = false, etc. 
=========================================================================================================================

=========================================================================================================================
#cannot have the following: 
{
    age = 4; 
    print("You are " + age);
    <will throw error, type mismatch> 

    instead, type conversion must be used to convert age to string: (wrap int variable in str(variable_here));  
    print("You are " str(age)); 
}
=========================================================================================================================


=========================================================================================================================
#Upper-case first letter:
name = "john"; 
print(name.capitalize);

#Upper-case entire String: 
name = "john"; 
print(name.upper()); 

#Lower-case entire String 
name = "john"
print(name.lower());

#Counts how many instances of the character is present within the string 
name = "john"; 
print(name.count("o")) //will yeild 1 

#Can change all instances of a particular character to whatever is specified: 
name = "johno"; 
print(name.replace("o", "a")) -> will output jahno 

#Can print string multiple times 
name = "john"; 
print(name*3); //will output johnjohnjohnn;

#String length: 
name = "john"; 
print(len(name)); 

#Find character within a String: 

//variableName.find("character"); -> returns index at which character resides. 
name = "john"; 
print(name.find("o")); 


=========================================================================================================================

Type-casting: 

1) //convert a double to an int 
scale = 4.0; 
print(int(scale)); //ouputs 4 .. could have also done scale = int(scale) in line 61 and print(scale). 

2) converting string to int to perform math 

three ways for valid type cast: 
# number = "4"; 
# print(number + 2); 

# number = "4"; 
# number = int(number) + 4; 
# print(number); 

# number = "4"; 
# print(int(number) + 4); 
=========================================================================================================================


=========================================================================================================================
Basic if-else Structure:

age = 10; 

if age == 5: 
    print("you are an adult") 
elif age < 5:
    print("you are not an adult") 
else:
    print("you are an alien"); 
=========================================================================================================================

#Convert Weight to Kg Method 1 -- 
#weight = input("Enter weight "); 
#result = float(weight) / 2.205; 

#print("Result: " + str(result)); 


#Convert Weight to kg Method 2 -- 
#weight = float( input("Enter Weight ")); 
#weight = str(weight / 2.205); 
#print("Result: " + weight); 


#Strings: Getting character at index --
#name = "John Boyde"; 
#random_letter = name[2],
#print(random_letter); 
#could have also done print(name[2]); 

#NOTE: name[-3] returns third character from the end! SO, stringName[-x] = xth char from end. 

#Slicer -> prints from index1:index2, excludes
#index 2. 
#statement = "Python for Beginners"; 
#sliced = statement[0: 3]; 
#print(sliced); 

#Slicer to return from specified index to end of string 
#moving = "python"
#slicer = moving[2:]
#print(slicer); 

#Slicer to return string up to index specified but excluding index itself 
#random_string = "jennifer"; 
#slicer = random_string[: 4]
#print(slicer); 

#Middle elements of String (excluding ends) 
#myString = "pythonic"; 
#slicer = myString[1: -1]; 
#print(slicer); 

#Find the index at which a word begins:
#prints two because love word begins at index 2
#sentence = "I love java way too much"; 
#result = sentence.find("love"); 
#print(result); 

#replace word
#mySentence = "I hate dogs"; 
#new_String = mySentence.replace("hate", "love");
#print(new_String); 
#outputs I love dogs

#replace letter, same idea: 
#myWord = "Python"; 
#new_string = myWord.replace("P" , "J"); 
#print(new_string); 


#basic logical branch
#age = 10; 
#if age > 5 and age < 7:
#		print("toddler"); 
#elif age == 10: 
#	print("you are 10"); 
#else : 
#	print("catch all other instances")

#Logical branch example, More Complex---
#price = 1000000; 
#good_credit = False; 
#down = 0; 
#note, 10% of price is 0.1 * price, and 20% of price is 0.2 * price 

#answer =int(input("Enter one for good good credit and two for bad credit")); 

#if answer == 1: 
#	good_credit = True; 
#elif answer == 2: 
#	good_credit = False; 
#else: 
#	print("Answer must be 1 or 2"); 
#	
#if good_credit: 
#	down = 0.1 * price; 
#else: 
#	down = 0.2 * price; 
#	
#print("Your down payment is: " + str(down)); 

#Eligible for loan: if has high_income and good_credit then print eligible. 
#will print not eligible 
#high_income = True; 
#good_credit= False;   

#if high_income and good_credit: 
#	print("Eligible"); 
#else: 
#	print("Not Eligible"); 
#	


#Eligible for Loan 2: if has high income OR good credit (either or both.. so at least one), print eligible otherwise not eligible 
#high_income = True; 
#good_credit = True; 

#if high_income and good_credit:
#	print("eligible"); 
#else:
#print("not eligible"); 

#Eligible for Loan 3: using not operator 
#if person has criminal record and high_income, do not give loan 
#high_income = True;
#criminal_record = True; 

#if high_income and not criminal_record:
#	print("Eligible") 
#else:
#	print("Not Eligible")


#Temperature Excersise: 
#temp = int(input("Enter Temperature: ")); 

#if temp > 30:
#	print("It's a hot day"); 
#elif temp < 10:
#	print("it's a cold day"); 
#else:
#	print("neither cold nor hot"); 

#Auth excerise 
#If chars less than 3, print must be more than 3.
#if chars greater than 50, must be less than 50. 
#name = input("Enter Name "); 
#if len(name) < 3: 
#    print("Name must be greater than three characters"); 
#elif len(name) > 50: 
#       print("Name cannot exceed 50 characters"); 
#else: 
#       print("Name saved!"); 


#Weight Calculator Revisited: 
#Ask for weight, ask if in l or k (irrespective of upper or lowercase) and then return their weight in the opposite unit. 

#weight = float(input("Enter Weight ")); 

#letter = input("(L)bs or (K)g ");  

#kilograms = True; 

#if letter.lower() == "l": 
#	weight = weight/2.205; 
#	print("You are: " + str(weight) + " " + " Kgs")
#elif letter.lower() == "k": 
#	weight = weight*2.205;
#	print("You are: " + str(weight) + " " + " Lbs")
	

#While-loop - print hi 5 times 

#i = 0; 
#while i < 5: 
#	print("Hello"); 
#	i += 1; 
#print("Done"); 

#While loop hi as many times as entered
#response = int(input("how many times would you like to print hi? ")); 

#i = 0; 
#while i < response:
#	print("hi"); 
#	i += 1; 

#print("done"); 

#guessing game 
#answer = 5; 
#response = int(input("Guess: ")); 

#if response != answer:
#	i = 1; 
#	while response!= answer:
#		response = int(input("Guess: ")); 
#		i += 1; 
#		if i == 3:
#			print("Sorry, you failed"); 
#			break
#elif response == answer:
#	print("correct!")

#guessing-game Mosh's version'
#answer = 5; 
#guess_attempts = 0; 
#guess_limit = 3; 

#while guess_attempts < guess_limit:   
#	response = int(input("Guess: "))
#	guess_attempts += 1; 
#	
#	if guess_attempts == guess_limit: 
#		print("You have lost!"); 
#	
#	if response == 5: 
#		print("You win"); 
#		break 

#Mosh game 
# string.equals equivalent is string1 == string2 

#user_input = input(">"); 

#if user_input.lower() == "help": 
#			print(
#		'''
#		 start - to start the car
#		 stop - to stop the car
#		 quit - to exit
#		 
#		 ''')
#			while user_input.lower() != quit:
#				user_input = input(">"); 
#				if user_input.lower() == "start":
#					print("Ready to go!"); 
#				elif user_input.lower() == "stop":
#					print("Car stopped!"); 
#				elif user_input.lower() == "quit": 
#					break 
#				else: 
#					print("I don't understand"); 
#				
#		
#print("Thanks for driving!"); 


====================================================================================================================
My Rendition of Mosh's Guessing Game:

response = input(">")
if response == "help":
    print(
    '''
    start - start the car
    stop - stop the car 
    done - quit application
    '''
 ) 
    response = input(">")
    while (response.lower() != "done"): 
        if(response.lower() == "start"):
            print("Ready to go!"); 
        elif(response.lower() == "stop"):
            print("Car has stopped");
        else:
            print("I don't understand..");  
        response = input(">");
else: 
    print("prompt response not recognized, valid option is help");

print("Thank you for using the program!");

====================================================================================================================

====================================================================================================================
Indexing:
DSA
Indexing:
> indexing in python begins from 0.
E.G
myString = "frog"
print(myString[2])
outputs "o"

> Can index entire strings the same way
E.G
words = ["cow", "snake", "mary"]
temp = words[1]
print(temp);
outputs snake
====================================================================================================================


> Slicing
Note: these apply to tuples and lists

> Combining Strings
string1 = "Hello"
string2 = "Bye"
string3 = string1 + string2
print(string3);
//outputs hellobye

> Multiply Strings
string1 = "hello";
string2 = string1 * 3;
print(string2)
//outputs hellohellohello

> Multiply Lists
list1 = [3,2,4,1];
list2 = list1[1:3] *3;
print(list2);
//prints [2 4 2 4 2 4]

> Check if letter is in string, will give boolean. (Check membership)
myString = "Hello"
bool = "u" in myString
print(bool)
//prints False since no u present

>Can check with list of Strings as well
(Check membership)
string_list = ["jared", "amy", "tony"]
bool = "jared" in string_list
print(bool);

>Use for each loop to iterate over a sequence (list)
seq = ["girl", "boy", "hybrid"]
for item in seq:
   print(item)

>If "A" exists in list, print False.
list = ["A", "B", "C"]
bool = True;
for item in list:
if item == "A":
bool = False;
print(bool);

>Access item with index
list = ["Mary", "Joseph", "Tyler"]
for index, item in enumerate(list):
print(index, item)

> Access items of an index
list = ["Mary", "Joseph", "Tyler"]
for index, item in enumerate(list):
print(index)

>Length of List and String
mySeq = [2,3,4,1]
length = len(mySeq)
print(length);

mySeq = ["jerry", "barry", "arnie"]
lngth = len(mySeq)
print(length);

> Sum of sequence using for-each
sum = 0;
list = [4, 2, 1, 6];
for item in list:
sum += item;
print(sum);

>Sum of sequence using sum()
#Sum of list using for-each loop
list = [4, 2, 1, 6];
answer = sum(list);
print(answer);

>Sum of a partial sequence (portion)
mySeq = [4,2,1,8,3]
answer = sum(mySeq[1:4])
print(answer)

>Sum of everything after Xth index
mySeq = [4,2,1,9];
answer = sum(mySeq[1:])
print(answer)

> Count occurence of letter in String
myString = "Hello";
num = myString.count("l");
print(num);

>Count occurence of word in list of Strings
myList = ["Jerry", "Bob", "Luis", "Jerry"]
num = myList.count("Jerry");
print(num)

> Index of first occurance of item
myStr = "Hippo"
index = myStr.index("p");
print(index);

>Index of first occurence of item in list
list = [4,3,1,9];
index = list.index(3);
print(index); 


