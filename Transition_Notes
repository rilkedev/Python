
=========================================================================================================================
@STRINGS@
#Upper-case first letter:
name = "john"; 
print(name.capitalize);

#Upper-case entire String: 
name = "john"; 
print(name.upper()); 

#Lower-case entire String 
name = "john"
print(name.lower());

#Counts how many instances of the character is present within the string 
name = "john"; 
print(name.count("o")) //will yeild 1 

#Can change all instances of a particular character to whatever is specified: 
name = "johno"; 
print(name.replace("o", "a")) -> will output jahno 

#Can print string multiple times 
name = "john"; 
print(name*3); //will output johnjohnjohnn;

#String length: 
name = "john"; 
print(len(name)); 

#Find character within a String: 
//variableName.find("character"); -> returns index at which character resides. 
name = "john"; 
print(name.find("o")); 

#Strings: Getting character at index --
#name = "John Boyde"; 
#random_letter = name[2],
#print(random_letter); 
#could have also done print(name[2]); 

#NOTE: name[-3] returns third character from the end! SO, stringName[-x] = xth char from end. 

#Slicer -> prints from index1:index2, excludes
#index 2. 
#statement = "Python for Beginners"; 
#sliced = statement[0: 3]; 
#print(sliced); 

#Slicer to return from specified index to end of string 
#moving = "python"
#slicer = moving[2:]
#print(slicer); 

#Slicer to return string up to index specified but excluding index itself 
#random_string = "jennifer"; 
#slicer = random_string[: 4]
#print(slicer); 

#Middle elements of String (excluding ends) 
#myString = "pythonic"; 
#slicer = myString[1: -1]; 
#print(slicer); 

#Find the index at which a word begins:
#prints two because love word begins at index 2
#sentence = "I love java way too much"; 
#result = sentence.find("love"); 
#print(result); 

#replace word
#mySentence = "I hate dogs"; 
#new_String = mySentence.replace("hate", "love");
#print(new_String); 
#outputs I love dogs

#replace letter, same idea: 
#myWord = "Python"; 
#new_string = myWord.replace("P" , "J"); 
#print(new_string); 

Indexing Strings:
> indexing in python begins from 0.
E.G
myString = "frog"
print(myString[2])
outputs "o"

> Can index entire strings the same way
E.G
words = ["cow", "snake", "mary"]
temp = words[1]
print(temp);
outputs snake

> Combining Strings
string1 = "Hello"
string2 = "Bye"
string3 = string1 + string2
print(string3);
//outputs hellobye

> Multiply Strings
string1 = "hello";
string2 = string1 * 3;
print(string2)
//outputs hellohellohello

> Check if letter is in string, will give boolean. (Check membership)
myString = "Hello"
bool = "u" in myString
print(bool)
//prints False since no u present

>Can check with list of Strings as well
(Check membership)
string_list = ["jared", "amy", "tony"]
bool = "jared" in string_list
print(bool);
=========================================================================================================================

=========================================================================================================================
@TYPECASTING@
1) //convert a double to an int 
scale = 4.0; 
print(int(scale)); //ouputs 4 .. could have also done scale = int(scale) in line 61 and print(scale). 

2) converting string to int to perform math 

three ways for valid type cast: 
# number = "4"; 
# print(number + 2); 

# number = "4"; 
# number = int(number) + 4; 
# print(number); 

# number = "4"; 
# print(int(number) + 4); 

#cannot have the following: 
{
    age = 4; 
    print("You are " + age);
    <will throw error, type mismatch> 

    instead, type conversion must be used to convert age to string: (wrap int variable in str(variable_here));  
    print("You are " str(age)); 
}

#Convert Weight to Kg Method 1 -- 
#weight = input("Enter weight "); 
#result = float(weight) / 2.205; 
#print("Result: " + str(result)); 

#Convert Weight to kg Method 2 -- 
#weight = float( input("Enter Weight ")); 
#weight = str(weight / 2.205); 
#print("Result: " + weight); 

=========================================================================================================================

=========================================================================================================================
Lists:
>Use for each loop to iterate over a sequence (list)
seq = ["girl", "boy", "hybrid"]
for item in seq:
   print(item)

>If "A" exists in list, print False.
list = ["A", "B", "C"]
bool = True;
for item in list:
	if item == "A":
	bool = False;
print(bool);

>Access item with index
list = ["Mary", "Joseph", "Tyler"]
for index, item in enumerate(list):
	print(index, item)

> Access items of an index
list = ["Mary", "Joseph", "Tyler"]
for index, item in enumerate(list):
	print(index)

>Length of List and String
mySeq = [2,3,4,1]
length = len(mySeq)
print(length);

> mySeq = ["jerry", "barry", "arnie"]
length = len(mySeq)
print(length);

> Sum of sequence using for-each
sum = 0;
list = [4, 2, 1, 6];
for item in list:
	sum += item;
print(sum);

> Multiply Lists
list1 = [3,2,4,1];
list2 = list1[1:3] *3;
print(list2);
//prints [2 4 2 4 2 4]

>Sum of sequence using sum()
#Sum of list using for-each loop
list = [4, 2, 1, 6];
answer = sum(list);
print(answer);

>Sum of a partial sequence (portion)
mySeq = [4,2,1,8,3]
answer = sum(mySeq[1:4])
print(answer)

>Sum of everything after Xth index
mySeq = [4,2,1,9];
answer = sum(mySeq[1:])
print(answer)

> Count occurence of letter in String
myString = "Hello";
num = myString.count("l");
print(num);

>Count occurence of word in list of Strings
myList = ["Jerry", "Bob", "Luis", "Jerry"]
num = myList.count("Jerry");
print(num)

> Index of first occurance of item
myStr = "Hippo"
index = myStr.index("p");
print(index);

>Index of first occurence of item in list
list = [4,3,1,9];
index = list.index(3);
print(index); 

>Extracting sub-list
list = [4,2,3,1]
print(list[0: -1])
//prints [4,2,3]

>Make a function that takes a list as a parameter and returns the sum
def count(random_list):
sum = 0
for item in random_list:
	sum += item
return sum

my_list = [4,2,6]
sum = count(my_list)
print(sum)

>append to list
my_list = [4,2,8]
my_list.append(9)
print(my_list

#append a list within a list
my_list = [4,2,8, "hello"]
my_list.append([8,8,8])
print(my_list)

> Remove item from end
my_list = [4,2,8, "hello"]
my_list.pop()
print(my_list)
//returns [4,2,8]

>Remove at specified index
list = [4,2,9,1]
list.remove(2)
print(list)

> Access any element
my_list = [4,2,8, "hello"]
item = my_list[1]
print(item)

>change content of item in list
my_list = [4,2,8, "hello"]
my_list[1] = 4
print(my_list)

> Q: Given my_list = ["berry", 2, 0] achieve
[0, 2, "berry"]
//save first element in temp variable
//set first to last
//set last to temp
//print
temp = my_list[0]
my_list[0] = my_list[2]
my_list[2] = temp
print(my_list)

> add all numbers that are a multiple of three
list = [1,2,3,4,5,6,7,8]

total = 0
for e in list:
if e % 3 == 0:
total += e
print(total)

> add all numbers that are a multiple of three between 1 and 8
total = 0
for e in range(1,8):
if e % 3 == 0:
total += e
print(total)

> add all multiples of 3 and 5 that are less than 100
total = 0
for e in range(1, 100):
if e % 3 == 0 or e % 5 == 0:
total += e
print(total

> At what index does the value 9 occur
vals = [4,3,7,8,9,2,1]
answer = 0
for index in range(len(vals)):
if vals[index] == 9:
answer = index
break
print(answer)

> create a function that takes a value and a list, the function will return the index at which it occurs. (first occurance)
def find_index(random_list, number):
for index in range(len(random_list)):
if random_list[index] == number:
return index

test-case:
list = [4,9,3,7,1]

x = find_index(list, 3)
print(x)

NOTE-----------------------------------------------------------------------------------------------------------------------------------
Iterating over lists and adding elements optimizations:

>Two iteration methods
1) if you don't specify the list you're iterating over, and only choose a range, item is an index.
sum = 0;
list = [3, 3, 3];
for item in range(0, len(list)):
sum = sum + list[item];
print(sum);

2) if you do specify the list you're iterating over, item becomes the actual element.
seq = [1,1,1,1,2]
sum = 0
for item in seq:
sum = sum + item
print(sum)

Therefore, since item can act as an index in some cases and an actual item in others, it is beneficial for one to name the "item" component "index" 
when dealing with figure 1 since item acts as an index in that case.

sum = 0;
list = [3, 3, 3];
for index in range(0, len(list)):
sum = sum + list[index];
print(sum);


Note that the for the range parameters, 0 is implied. Therefore, the syntax can be simplified to:
sum = 0;
list = [3, 2, 3];
for index in range( len(list)):
sum = sum + list[index];
print(sum);
-------------------------------------------------------------------------------------------------------------------------------------------


====================================================================================================================
My Rendition of Mosh's Guessing Game:

response = input(">")
if response == "help":
    print(
    '''
    start - start the car
    stop - stop the car 
    done - quit application
    '''
 ) 
    response = input(">")
    while (response.lower() != "done"): 
        if(response.lower() == "start"):
            print("Ready to go!"); 
        elif(response.lower() == "stop"):
            print("Car has stopped");
        else:
            print("I don't understand..");  
        response = input(">");
else: 
    print("prompt response not recognized, valid option is help");

print("Thank you for using the program!");

====================================================================================================================


