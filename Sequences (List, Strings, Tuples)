========================================================================================================================
Python has a series of "sequences" objects which include tuples, lists, and strings. All of these support indexing in that each element has an index 
which can be referenced. 
name = "John"
J o h n
0 1 2 3 
my_list = [4, 3, 2, 3] 
	   0  1  2  3
	   
Lists:

List: 
> my_list = [1, 2, 4, 3, 2] 

>Can hold multiple data-types: my_list = ["Hello", False, 4, 2.2] 
	
>Length of List
	mySeq = [2,3,4,1]
	length = len(mySeq)
	print(length);
	
> Access any element
	my_list = [4,2,8, "hello"]
	item = my_list[1]
	print(item)
	
> Change content of item in list
		my_list = [4,2,8, "hello"]
		my_list[1] = 4
		print(my_list)

>append to list (add item to end)
		my_list = [4,2,8]
		my_list.append(9)
		print(my_list)

>append a list within a list
	my_list = [4,2,8, "hello"]
	my_list.append([8,8,8])
	print(my_list)

> Can also do this with two lists - create an array of lists or a function groups multiple lists into 1
    my_lists = []
    list1 = [4,2,1,1]
    list2 = [0,0,0,0]
    my_lists.append(list1)
    my_lists.append(list2)
    print(my_lists)

>Remove item from end pop()
		my_list = [4,2,8, "hello"]
		my_list.pop()
		print(my_list)
		//returns [4,2,8]
		
>Remove at specified index
	list = [4,2,9,1]
	list.remove(2)
	print(list)
		
> Removes the first matching element (which is passed as an argument) from the list.
		prime_numbers = [2, 3, 5, 7, 9, 11]
		# remove 9 from the list
		prime_numbers.remove(9)

>Index of first occurance of item
		myStr = "Hippo"
		index = myStr.index("p");
		print(index);
	
> Index of first occurence of item in list
		list = [4,3,1,9];
		index = list.index(3);
		print(index); 
		
> Copying list
	seq = [4, 2, 4, 1]
	numbers = seq.copy() 
	print(numbers)
		
> Can remove by typing element directly
    names = ["Jim", "Mariam", "Ashley"]
    names.remove("Jim")
    print(names)

> can clear list
    nums = [4,9,0,0,1,1]
    nums.clear()
    print(nums)
    
> Using extend method on list to extend its list to include elements of another list
    lucky_numbers = [4,9,2,1,0]
    friends = ["Jerry", "Cynthia", "Mariam", "Julia"]
    lucky_numbers.extend(friends)
    print(lucky_numbers)
    
> Printing multipes
	for x in range(2, 30, 3):
	 print(x)
	 
> Access last element 
	list = [4,2, 3, 2,1]
	print(list[len(list)-1])
> Access first element 
	print(list[0])
	
		

Iterating Over Lists and Range details O(N) 
---------------------------
Note: alternative way to iterate specified number of times (N)

	def print_hi(n):
	    while n > 0:
		print("hi")
		n = n - 1
	print_hi(3)


>Use for each loop to iterate over a sequence (list)
	seq = ["girl", "boy", "hybrid"]
	for item in seq:
		 print(item)

>Use regular for each to iterate over sequence using len() property. Remember, len(my_list) is the length of the list which is one more than the length of the
actual list. It wouldn't make sense to iterate from the 0th index to len(my_list) since len(my_list) will be an invalid index. However, the range function 
of the form range(a,b).. b is non-inclusive. So, in range(0,8) where 8 is the length of the list, we would actually want to iterate from 0,7 since there are 7
indicies total for a list of 8 elements. However, in range(0,8), since 8 is non-inclusive, we actually do iterate till the last valid index.
Both first and second entry achieve the same thing (refer to first entry in column)
		my_list = [4, 2, 4, 2, 1]
	for index in range(0, len(my_list)): //can also omit 0 as that is implied
		print(my_list[index])
		//outputs each item in list 
		
>Prints all values from start index to end (don't necessarily have to use "index") 
    vals = [4,2,6,9,1]
    for i in range(0,len(list)):
       print(vals[i])
       
>Prints all values EXCEPT the first index. 
	seq = [4, 2, 3, 1]
	for index in range(1, len(seq)):
	    print(seq[index])	

>Prints all values EXCEPT the last index. 
	#if list len is 5, execution will print from 0 to 5-1 which is 0-4 not including 4 so 0-3 hence elements stored from
	#0-3 will be printed. So, you can exclude last element from printing by doing len(seq)-1
	seq = [4, 2, 3, 1,3]
	for index in range(0, len(seq)-1):
	    print(seq[index])
			
>Sum of sequence using for-each
	sum = 0;
	list = [4, 2, 1, 6];
	for item in list:
		sum += item;
	print(sum);

>Sum of sequence using sum()
	#Sum of list using for-each loop
	list = [4, 2, 1, 6];
	answer = sum(list);
	print(answer);
	
>Sum of a partial sequence (portion)
	mySeq = [4,2,1,8,3]
	answer = sum(mySeq[1:4])
	print(answer)
	
>Sum of everything after Xth index
	mySeq = [4,2,1,9];
	answer = sum(mySeq[1:])
	print(answer)
	
>Multiply Lists
	list1 = [3,2,4,1];
	list2 = list1[1:3] *3;
	print(list2);
	//prints [2 4 2 4 2 4]
	
> Extracting sub-list
	list = [4,2,3,1]
	print(list[0: -1])
	//prints [4,2,3]
	
Find the maximum value of a list:
 def find_max(my_list):
        #assume the first element is the max
        #iterate starting from first element to the end
        #if any give element at a particular index is greater than the max, then that element referenced by its index becomes the new max.
        #return max
        max = my_list[0]
        for index in range(1, len(list)):
            if my_list[index] > max:
                max = my_list[index]
        return max
    list = [4, 2, 1, 5, 22]
    print(find_max(list))
    
    (can add a simple condition on first line of method: if len(my_list) == 0: return None
	
---------------------------------------------------------------------------------------------
ENUMERATE FUNCTION:
>>If you wanted to print items and index alongside each other, you would probably do it like this
names = ["Tom", "Julia", "Jacob", "Mary", "Matthew"]
for index in range(len(names)):
    print(index, names[index])
>>Or, perhpas you can use a a for item in list loop:
index = 0
for item in names:
    print(item, index)
    index += 1
>>But, enumerate allows you to do this - specify "for index, item in enumerate(list_name)" and do print(index, item)
names = ["Tom", "Julia", "Jacob", "Mary", "Matthew"]
for index, item in enumerate(names):
    print(index, item)

----------------------------------------------------------------------------------------------

QUESTIONS ON LISTS (BASIC): 

> Q: If "A" exists in list, print False.
list = ["A", "B", "C"]
bool = True;
for item in list:
	if item == "A":
	bool = False;
print(bool);

> Q: Make a function that takes a list as a parameter and returns the sum
def count(random_list):
	sum = 0
	for item in random_list:
		sum += item
	return sum
#Execution 
my_list = [4,2,6]
sum = count(my_list)
print(sum)

> Q: Given my_list = ["berry", 2, 0] achieve
[0, 2, "berry"]
//save first element in temp variable
//set first to last
//set last to temp
//print
temp = my_list[0]
my_list[0] = my_list[2]
my_list[2] = temp
print(my_list)

> Q: add all numbers that are a multiple of three
list = [1,2,3,4,5,6,7,8]
	total = 0
	for e in list:
	if e % 3 == 0:
	total += e
	print(total)

> Q: add all numbers that are a multiple of three between 1 and 8
	total = 0
	for e in range(1,8):
		if e % 3 == 0:
		total += e
	print(total)

> Q: add all multiples of 3 and 5 that are less than 100
total = 0
for e in range(1, 100):
	if e % 3 == 0 or e % 5 == 0:
	total += e
print(total)

>Q: At what index does the value 9 occur
	vals = [4,3,7,8,9,2,1]
	answer = 0
	for index in range(len(vals)):
	if vals[index] == 9:
	answer = index
	break
	print(answer)

>Q: #create a function that takes a list and a number as a parameter and 
# prints the index at which the number occurs in the list 

				def get_index(list, number):
						for index in range(len(list)):
								if list[index] == number: 
										return index 
				arb_list = [4, 2, 9, 2, 5, 8]
				result = get_index(arb_list,8)
				print(result)
				
				
>> Create a function that passes a list as a parameter and sums all elements of the given list 
Solution 1:
def sum_list(my_list):
    sum = 0
    for item in my_list:
        sum += item
    return sum

list = [3, 2, 1, 2]
print(sum_list(list))

Solution 2:

def sum_list(my_list):
    return sum(my_list)

list = [3, 2, 1, 2]
print(sum_list(list))


>> Create a function that passes a list and an index as a parameter and sums all elements after the index specified 
	Solution 1:
	def sum_after_xth(my_list, index):
	    return sum(my_list[index:])

	my_list = [4, 2, 1, 3]
	print(sum_after_xth(list, 2))


>> Create a function that takes two parameters, a and b, where a signifies the starting index and the ending index of the sum of elements that should be returned 
	Solution:
	def sum_of_partial(a, b, list):
		return sum(list[a:b])

	list = [4, 2, 3, 1, 4]
	print(sum_of_partial(1, 3, list))


#>>create a method that adds everything after the second index, assume the length of the list is > 2
	def sum2(list):
	    sum = 0
	    for k in range(2, len(list)):
		sum = sum + list[k]
	    return sum


#>>create method that takes in a and b where a and b are indicies within an array - sum elements from a to b
the length of the array will always be greater than 1, however, ensure that the user does not pass an incidies b where b exceeds 
the number of elements in the array - throw an array saying "b is not a valid indicies" if this is the case
	def sum_sub(list, a, b):
	    if b > len(list)-1:
		print("b is not a valid indicies")
		return
	    result = sum(list[a:b+1])
	    return result

	val = [4, 2, 4, 1,4, 2, 4, 1,4, 2, 4, 1]
	result = sum_sub(val,2, 14)
	print(result)


>Q: #create a function that takes a list and a number as a parameter and 
# prints the index at which the number occurs in the list 
	def display_num(list, val):
	    result = 0
	    for k in range(len(list)):
		if list[k] == val:
		    return k

	values = [4, 4, 2, 5, 1]
	result = display_num(values, 5)
	print(result)

dbt
Q>>create a method that makes a distinction between even and odd elements stored within the list.
create two seperate lists where the first stores all odd elements; while the other stores all even elements
return a singular list that contains both even and odd lists.
INPUT: [4, 2, 4, 1, 5, 2]
OUTPUT: [ [4, 2, 4, 2] , [1,5] ]

	def even_odd(list):
	    list_even = []
	    list_odd = []
	    result = []
	    for item in list:
		if item % 2 == 0:
		    list_even.append(item)
		else:
		    list_odd.append(item)
	    result.append(list_even)
	    result.append(list_odd)
	    return result

	my_list = [4, 2, 5, 6, 2, 1]
	result = even_odd(my_list)
	print(result)
	
	
> Create function that returns a list of ascending numbers starting from 1 up to the last element in the original list 
  input: [1, 5, 2, 4]
  output: [1, 2, 3, 4]
  
	  def asc(list):
	    result = []
	    last = list[len(list)-1]
	    for index in range(1, last+1):
		result.append(index)
	    return result

	list=[4, 2, 4, 10]
	result = asc(list)
	print(result)

> Complete the function that takes one argument, a list of words, and returns the length of the longest word in the list.
	def longest(words):
	    result = [] 
	    for index in range(len(words)):
		result.append(len(words[index]))
	    return max(result)
          
	.... can you do it without using the max(result)? This brings up a question. How do we find the maximum number in a list w/o using max? 
					max = my_list[0]
					for index in range(1, len(list)):
					    if my_list[index] > max:
						max = my_list[index]
					return max
	... in the context of this problem

					    def longest_word(words):
						max = len(words[0])
						for index in range(1, len(list)):
						    if len(words[index]) > max:
							max = len(words[index])
						return max

					    list = ["Berry", "Matthew_Chestnut", "Julia", "Cynthia"]
					    print(longest_word(list))


>> N is an integer, return a list that has D digits from the end of the input integer. Input: 45232 d = 3 .. output: [2,3,2]
def solution(n,d):
	    if d > len(str(n)):
		return n
	    elif d <= 0:
		return []
	    result = []
	    n = str(n)
	    for index in range(len(n)-d, len(n)):
		result.append(int(n[index]))
	    return result
	n = 1343
	print(solution(n,2))			

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
>> NOTES ABOUT DISTINCTION BETWEEN FOR-EACH AND STANDARD FOR-LOOP AND SOME NUANCES TO CONSIDER 
Iterating over lists and adding elements optimizations:

>Two iteration methods
1) if you don't specify the list you're iterating over, and only choose a range, item is an index.
sum = 0;
list = [3, 3, 3];
for item in range(0, len(list)):
sum = sum + list[item];
print(sum);

2) if you do specify the list you're iterating over, item becomes the actual element.
seq = [1,1,1,1,2]
sum = 0
for item in seq:
sum = sum + item
print(sum)

Therefore, since item can act as an index in some cases and an actual item in others, it is beneficial for one to name the "item" component "index" 
when dealing with figure 1 since item acts as an index in that case.

sum = 0;
list = [3, 3, 3];
for index in range(0, len(list)):
sum = sum + list[index];
print(sum);


Note that the for the range parameters, 0 is implied. Therefore, the syntax can be simplified to:
sum = 0;
list = [3, 2, 3];
for index in range( len(list)):
sum = sum + list[index];
print(sum);

> Can mention starting an ending, ending is non-inclusive, starting is inclusive. 
	for i in range(2,7): 
	   print(i)
	prints 2,3,4,5,6

-------------------------------------------------------------------------------------------------------------------------------------------
